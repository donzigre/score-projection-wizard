
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Plus, Trash2 } from "lucide-react";
import { useFinancialData } from '@/contexts/FinancialDataContext';
import { formatCurrency } from '@/utils/formatting';

const defaultExpenseCategories = [
  { id: '1', category: 'Publicité et Marketing', monthlyAmount: 2000, growthRate: 5, isAutoCalculated: false },
  { id: '2', category: 'Transport et Déplacements', monthlyAmount: 800, growthRate: 3, isAutoCalculated: false },
  { id: '3', category: 'Assurances', monthlyAmount: 600, growthRate: 3, isAutoCalculated: false },
  { id: '4', category: 'Loyer et Charges Locatives', monthlyAmount: 3000, growthRate: 2, isAutoCalculated: false },
  { id: '5', category: 'Télécommunications', monthlyAmount: 300, growthRate: 2, isAutoCalculated: false },
  { id: '6', category: 'Fournitures de Bureau', monthlyAmount: 200, growthRate: 3, isAutoCalculated: false },
  { id: '7', category: 'Services Professionnels', monthlyAmount: 1500, growthRate: 3, isAutoCalculated: false },
  { id: '8', category: 'Amortissements', monthlyAmount: 0, growthRate: 0, isAutoCalculated: true },
  { id: '9', category: 'Intérêts Bancaires', monthlyAmount: 0, growthRate: 0, isAutoCalculated: true },
];

const ChargesExploitationSection = () => {
  const { data, updateOperatingExpenses } = useFinancialData();
  const [expenses, setExpenses] = useState(data.operatingExpenses || defaultExpenseCategories);

  const addExpense = () => {
    const newExpense = {
      id: Date.now().toString(),
      category: 'Nouvelle Charge',
      monthlyAmount: 0,
      growthRate: 3,
      isAutoCalculated: false
    };
    const updatedExpenses = [...expenses, newExpense];
    setExpenses(updatedExpenses);
    updateOperatingExpenses(updatedExpenses);
  };

  const removeExpense = (id: string) => {
    const updatedExpenses = expenses.filter(expense => expense.id !== id);
    setExpenses(updatedExpenses);
    updateOperatingExpenses(updatedExpenses);
  };

  const updateExpense = (id: string, field: string, value: any) => {
    const updatedExpenses = expenses.map(expense => 
      expense.id === id ? { ...expense, [field]: value } : expense
    );
    setExpenses(updatedExpenses);
    updateOperatingExpenses(updatedExpenses);
  };

  const calculateYearlyTotal = (monthlyAmount: number, growthRate: number, year: number) => {
    const growthMultiplier = Math.pow(1 + (growthRate / 100), year - 1);
    return monthlyAmount * 12 * growthMultiplier;
  };

  const getTotalByYear = (year: number) => {
    return expenses.reduce((total, expense) => {
      return total + calculateYearlyTotal(expense.monthlyAmount, expense.growthRate, year);
    }, 0);
  };

  return (
    <div className="space-y-6">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Charges d'Exploitation</h2>
        <p className="text-gray-600">Configurez vos charges d'exploitation mensuelles et taux de croissance</p>
      </div>

      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Catégories de Charges</CardTitle>
          <Button onClick={addExpense} size="sm">
            <Plus className="h-4 w-4 mr-2" />
            Ajouter une charge
          </Button>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-12 gap-4 font-semibold text-sm text-gray-600 border-b pb-2">
              <div className="col-span-4">Catégorie</div>
              <div className="col-span-2">Montant Mensuel</div>
              <div className="col-span-2">Croissance (%)</div>
              <div className="col-span-1">Année 1</div>
              <div className="col-span-1">Année 2</div>
              <div className="col-span-1">Année 3</div>
              <div className="col-span-1">Actions</div>
            </div>
            
            {expenses.map((expense) => (
              <div key={expense.id} className="grid grid-cols-12 gap-4 items-center">
                <div className="col-span-4">
                  <Input
                    value={expense.category}
                    onChange={(e) => updateExpense(expense.id, 'category', e.target.value)}
                    disabled={expense.isAutoCalculated}
                    className={expense.isAutoCalculated ? 'bg-gray-100' : ''}
                  />
                </div>
                <div className="col-span-2">
                  <Input
                    type="number"
                    value={expense.monthlyAmount}
                    onChange={(e) => updateExpense(expense.id, 'monthlyAmount', Number(e.target.value))}
                    disabled={expense.isAutoCalculated}
                    className={expense.isAutoCalculated ? 'bg-gray-100' : ''}
                  />
                </div>
                <div className="col-span-2">
                  <Input
                    type="number"
                    step="0.1"
                    value={expense.growthRate}
                    onChange={(e) => updateExpense(expense.id, 'growthRate', Number(e.target.value))}
                    disabled={expense.isAutoCalculated}
                    className={expense.isAutoCalculated ? 'bg-gray-100' : ''}
                  />
                </div>
                <div className="col-span-1 text-sm font-medium">
                  {formatCurrency(calculateYearlyTotal(expense.monthlyAmount, expense.growthRate, 1))}
                </div>
                <div className="col-span-1 text-sm font-medium">
                  {formatCurrency(calculateYearlyTotal(expense.monthlyAmount, expense.growthRate, 2))}
                </div>
                <div className="col-span-1 text-sm font-medium">
                  {formatCurrency(calculateYearlyTotal(expense.monthlyAmount, expense.growthRate, 3))}
                </div>
                <div className="col-span-1">
                  {!expense.isAutoCalculated && (
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => removeExpense(expense.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Résumé Total des Charges</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-3 gap-6 text-center">
            <div className="p-4 bg-blue-50 rounded-lg">
              <h3 className="font-semibold text-blue-900">Année 1</h3>
              <p className="text-2xl font-bold text-blue-600">
                {formatCurrency(getTotalByYear(1))}
              </p>
            </div>
            <div className="p-4 bg-green-50 rounded-lg">
              <h3 className="font-semibold text-green-900">Année 2</h3>
              <p className="text-2xl font-bold text-green-600">
                {formatCurrency(getTotalByYear(2))}
              </p>
            </div>
            <div className="p-4 bg-purple-50 rounded-lg">
              <h3 className="font-semibold text-purple-900">Année 3</h3>
              <p className="text-2xl font-bold text-purple-600">
                {formatCurrency(getTotalByYear(3))}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ChargesExploitationSection;
